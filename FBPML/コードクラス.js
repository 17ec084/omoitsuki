class コードType
{
    constructor(文字列)
    {
        this.文字列 = 文字列;
    }

    をセーブする(){return this.文字列;}//テスト済み
    をロードする(セーブデータ){this.文字列 = セーブデータ;}//テスト済み
    をコピーする(){return new コードType(this.文字列);}//テスト済み

    の先頭からホワイトスペースを除去する() //テスト済み
    {
        this.文字列 = this.の先頭からホワイトスペースを除去する_副作用無し();
        return this.文字列;
    }

    の先頭からホワイトスペースを除去する_副作用無し() //テスト済み
    {
        let 文字列 = this.文字列;
        while ([" ", "\t", "\r", "\n"].includes(文字列.substr(0,1)))
        {
            文字列 = 文字列.slice(1);
        }
        return 文字列;
    }

    の先頭が次に一致する(検索文字列) //テスト済み
    {
        return this.文字列.substr(0, 検索文字列.length) === 検索文字列;
    }
    の先頭が次に一致しない(検索文字列){return !this.の先頭が次に一致する(検索文字列);}

    の先頭が次に一致しないならエラーを投げ一致するなら進める(検索文字列, 非終端記号名) //テスト済み
    {
        if (!(this.の先頭が次に一致する(検索文字列)))
            throw new Error("「"+検索文字列+"」が来るべきでした。於 "+非終端記号名);
        else
            this.の先頭から次に指定する文字数だけ消去する(検索文字列.length);
    }

    の先頭が次に一致しないならエラーを投げ一致するなら進めてホワイトスペースを除去する(検索文字列, 非終端記号名) //未テスト
    //テスト略
    {
        this.の先頭が次に一致しないならエラーを投げ一致するなら進める(検索文字列, 非終端記号名);
        this.の先頭からホワイトスペースを除去する();
    }


    の先頭1文字が次のいずれかに一致する(検索文字列) //テスト済み
    {
        const 検索文字配列 = 検索文字列.split("");
        let 検索文字;

        for (検索文字 of 検索文字配列)
            if (this.の先頭が次に一致する(検索文字))
                return true;
        return false;
    }
    の先頭1文字が次のいずれにも一致しない(検索文字列){return !this.の先頭1文字が次のいずれかに一致する(検索文字列);}

    の先頭から次に指定する文字数だけ消去する(n)//テスト済み。nが大きすぎる時、空文字となる。
    {
        this.文字列 = this.文字列.slice(n);
        return this.文字列;
    }

    が残っている() //テスト済み
    {
        return this.の先頭からホワイトスペースを除去する_副作用無し().length != 0;
    }
    が残っていない(){return !this.が残っている();}

    の先頭から次に指定する文字数だけ取得する(n = null)//テスト略
    /**
        引数に省略すると、すべて取得する。
     */
    {
        if (n == null)
            return this.文字列;
        else
            return this.文字列.substr(0, n);
    }

    の先頭から次に指定する文字数だけ取り出す(n)//テスト略
    {
        const rtn = this.文字列.substr(0, n);
        this.文字列 = this.文字列.slice(n);
        return rtn;
    }

}